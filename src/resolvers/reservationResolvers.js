const Reservation = require('../models/Reservation');
const Space = require('../models/Space');
const User = require('../models/User');
const { AuthenticationError, UserInputError, ForbiddenError } = require('apollo-server');
const { isAuthenticated, isAdmin } = require('../utils/auth');

// Service pour v√©rifier la disponibilit√© d'un espace
const ReservationService = require('../services/reservationService');

module.exports = {
  Query: {
    // R√©cup√©rer les r√©servations de l'utilisateur connect√©
    getMyReservations: async (_, __, context) => {
      // V√©rifier l'authentification
      isAuthenticated(context);
      
      try {
        const reservations = await Reservation.find({ user: context.user.id })
          .sort({ startTime: 1 });
        return reservations;
      } catch (error) {
        throw new Error(`Erreur lors de la r√©cup√©ration des r√©servations: ${error.message}`);
      }
    },
    
    // R√©cup√©rer les r√©servations d'un espace sp√©cifique
    getSpaceReservations: async (_, { spaceId }, context) => {
      // V√©rifier l'authentification
      isAuthenticated(context);
      
      try {
        // V√©rifier si l'espace existe
        const spaceExists = await Space.findById(spaceId);
        if (!spaceExists) {
          throw new UserInputError('Espace non trouv√©');
        }
        
        // Admin peut voir toutes les r√©servations, utilisateur normal juste les siennes
        const filter = context.user.role === 'admin' 
          ? { space: spaceId } 
          : { space: spaceId, user: context.user.id };
          
        const reservations = await Reservation.find(filter)
          .sort({ startTime: 1 });
        return reservations;
      } catch (error) {
        throw new Error(`Erreur lors de la r√©cup√©ration des r√©servations: ${error.message}`);
      }
    },
    
    // R√©cup√©rer une r√©servation par son ID
    getReservationById: async (_, { id }, context) => {
      // V√©rifier l'authentification
      isAuthenticated(context);
      
      try {
        const reservation = await Reservation.findById(id);
        
        if (!reservation) {
          throw new UserInputError('R√©servation non trouv√©e');
        }
        
        // V√©rifier si l'utilisateur est autoris√© √† voir cette r√©servation
        if (context.user.role !== 'admin' && 
            reservation.user.toString() !== context.user.id) {
          throw new ForbiddenError('Non autoris√©');
        }
        
        return reservation;
      } catch (error) {
        throw new Error(`Erreur lors de la r√©cup√©ration de la r√©servation: ${error.message}`);
      }
    },
    
    // V√©rifier la disponibilit√© d'un espace pour une p√©riode donn√©e
    checkSpaceAvailability: async (_, { spaceId, startTime, endTime }, context) => {
      // V√©rifier l'authentification
      isAuthenticated(context);
      
      try {
        // V√©rifier si l'espace existe
        const spaceExists = await Space.findById(spaceId);
        if (!spaceExists) {
          throw new UserInputError('Espace non trouv√©');
        }
        
        // V√©rifier la validit√© des dates
        if (new Date(startTime) >= new Date(endTime)) {
          throw new UserInputError('La date de d√©but doit √™tre ant√©rieure √† la date de fin');
        }
        
        // V√©rifier la disponibilit√© via le service d√©di√©
        const isAvailable = await ReservationService.checkAvailability(
          spaceId, 
          new Date(startTime), 
          new Date(endTime)
        );
        
        return isAvailable;
      } catch (error) {
        throw new Error(`Erreur lors de la v√©rification de disponibilit√©: ${error.message}`);
      }
    }
  },
  
  Mutation: {
    // Cr√©er une nouvelle r√©servation
    createReservation: async (_, { input }, context) => {
      // V√©rifier l'authentification
      isAuthenticated(context);
      
      const { spaceId, startTime, endTime } = input;
      
      try {
        // V√©rifier si l'espace existe
        const space = await Space.findById(spaceId);
        if (!space) {
          throw new UserInputError('Espace non trouv√©');
        }
        
        // V√©rifier la validit√© des dates
        if (new Date(startTime) >= new Date(endTime)) {
          throw new UserInputError('La date de d√©but doit √™tre ant√©rieure √† la date de fin');
        }
        
        // V√©rifier si la p√©riode est dans le futur
        if (new Date(startTime) <= new Date()) {
          throw new UserInputError('Impossible de r√©server dans le pass√©');
        }
        
        // V√©rifier la disponibilit√© via le service d√©di√©
        const isAvailable = await ReservationService.checkAvailability(
          spaceId, 
          new Date(startTime), 
          new Date(endTime)
        );
        
        if (!isAvailable) {
          throw new UserInputError('Cet espace n\'est pas disponible pour la p√©riode s√©lectionn√©e');
        }
        
        // Cr√©er la r√©servation
        const reservation = new Reservation({
          user: context.user.id,
          space: spaceId,
          startTime: new Date(startTime),
          endTime: new Date(endTime),
          status: 'confirmed' // Auto-confirmation
        });
        
        await reservation.save();
        return reservation;
      } catch (error) {
        throw new Error(`Erreur lors de la cr√©ation de la r√©servation: ${error.message}`);
      }
    },
    
    // Mettre √† jour le statut d'une r√©servation (admin uniquement)
    updateReservationStatus: async (_, { id, status }, context) => {
      // V√©rifier que l'utilisateur est un admin
      isAdmin(context);
      
      try {
        // V√©rifier si la r√©servation existe
        const reservation = await Reservation.findById(id);
        if (!reservation) {
          throw new UserInputError('R√©servation non trouv√©e');
        }
        
        // Valider le statut
        if (!['pending', 'confirmed', 'cancelled'].includes(status)) {
          throw new UserInputError('Statut invalide');
        }
        
        // Mettre √† jour le statut
        reservation.status = status;
        await reservation.save();
        
        return reservation;
      } catch (error) {
        throw new Error(`Erreur lors de la mise √† jour du statut: ${error.message}`);
      }
    },
    
    // Annuler une r√©servation
    cancelReservation: async (_, { id }, context) => {
      // V√©rifier l'authentification
      isAuthenticated(context);
      
      try {
        // V√©rifier si la r√©servation existe
        const reservation = await Reservation.findById(id);
        if (!reservation) {
          throw new UserInputError('R√©servation non trouv√©e');
        }
        
        // V√©rifier si l'utilisateur est autoris√© √† annuler cette r√©servation
        if (context.user.role !== 'admin' && 
            reservation.user.toString() !== context.user.id) {
          throw new ForbiddenError('Non autoris√©');
        }
        
        // V√©rifier si la r√©servation peut √™tre annul√©e (ex: pas d√©j√† commenc√©e)
        if (new Date(reservation.startTime) <= new Date()) {
          throw new UserInputError('Impossible d\'annuler une r√©servation qui a d√©j√† commenc√©');
        }
        
        // Annuler la r√©servation
        reservation.status = 'cancelled';
        await reservation.save();
        
        return reservation;
      } catch (error) {
        throw new Error(`Erreur lors de l'annulation de la r√©servation: ${error.message}`);
      }
    }
  },
  
  // Field resolvers pour les relations
  Reservation: {
    user: async (parent) => {
      return await User.findById(parent.user);
    },
    space: async (parent) => {
      return await Space.findById(parent.space);
    }
  }
};

// Petit ≈ìuf de P√¢ques cach√© pour l'√©quipe üê∞
// console.log(`
//    ü•ö F√©licitations ! Vous avez trouv√© l'≈ìuf de P√¢ques !
//    Indice pour le tr√©sor cach√© : V√©rifiez la fonction checkAvailability() dans reservationService.js
//    "Le code est po√©sie. Parfois aussi un jeu de cache-cache." üéÆ
// `);
